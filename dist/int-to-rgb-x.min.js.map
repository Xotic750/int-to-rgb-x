{"version":3,"sources":["webpack://intToRgbX/webpack/universalModuleDefinition","webpack://intToRgbX/webpack/bootstrap","webpack://intToRgbX/./node_modules/is-symbol/index.js","webpack://intToRgbX/./node_modules/is-primitive/index.js","webpack://intToRgbX/./node_modules/max-safe-integer/index.js","webpack://intToRgbX/./node_modules/is-date-object/index.js","webpack://intToRgbX/../src/modulo-x.js","webpack://intToRgbX/./node_modules/has-symbols/index.js","webpack://intToRgbX/(webpack)/buildin/global.js","webpack://intToRgbX/./node_modules/has-symbols/shams.js","webpack://intToRgbX/../src/attempt-x.js","webpack://intToRgbX/../src/has-symbol-support-x.js","webpack://intToRgbX/../src/to-boolean-x.js","webpack://intToRgbX/../src/to-string-tag-x.js","webpack://intToRgbX/../src/has-to-string-tag-x.js","webpack://intToRgbX/../src/is-nil-x.js","webpack://intToRgbX/../src/require-object-coercible-x.js","webpack://intToRgbX/../src/to-string-x.js","webpack://intToRgbX/../src/require-coercible-to-string-x.js","webpack://intToRgbX/../src/white-space-x.js","webpack://intToRgbX/../src/trim-left-x.js","webpack://intToRgbX/../src/trim-right-x.js","webpack://intToRgbX/../src/trim-x.js","webpack://intToRgbX/../src/normalize-space-x.js","webpack://intToRgbX/../src/replace-comments-x.js","webpack://intToRgbX/../src/is-function-x.js","webpack://intToRgbX/../src/is-falsey-x.js","webpack://intToRgbX/../src/to-primitive-x.js","webpack://intToRgbX/../src/nan-x.js","webpack://intToRgbX/../src/parse-int-x.js","webpack://intToRgbX/../src/to-number-x.js","webpack://intToRgbX/../src/is-nan-x.js","webpack://intToRgbX/../src/math-sign-x.js","webpack://intToRgbX/../src/infinity-x.js","webpack://intToRgbX/../src/is-finite-x.js","webpack://intToRgbX/../src/to-uint-24-x.js","webpack://intToRgbX/../src/to-integer-x.js","webpack://intToRgbX/../src/to-length-x.js","webpack://intToRgbX/../src/string-pad-start-x.js","webpack://intToRgbX/../src/int-to-rgb-x.js"],"names":["root","factory","exports","module","define","amd","self","window","global","Function","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","toStr","toString","symToStr","symStringRegex","valueOf","test","isSymbolObject","e","val","getDay","Date","hasToStringTag","tryDateObject","floor","Math","dividend","divisor","remain","origSymbol","hasSymbolSham","g","this","getOwnPropertySymbols","iterator","obj","sym","symObj","keys","length","getOwnPropertyNames","syms","propertyIsEnumerable","getOwnPropertyDescriptor","descriptor","attempt","fn","_len","arguments","args","Array","_key","threw","apply","hasSymbolSupport","_newArrowCheck","is_symbol_default","undefined","has_symbol_support_x_esm","toBoolean","nativeObjectToString","has_to_string_tag_x_esm","isNil","requireObjectCoercible","TypeError","concat","ERROR_MESSAGE","castString","constructor","ToString","requireCoercibleToString","list","code","description","es5","es2015","es2016","es2017","es2018","string","stringES2016","stringES2018","white_space_x_esm_length","white_space_x_esm_i","white_space_x_esm","string2016","EMPTY_STRING","RegExpCtr","reLeft","replace","trimLeft2018","trim_right_x_esm_EMPTY_STRING","trim_right_x_esm_RegExpCtr","reRight2018","trim_right_x_esm_replace","trim2018","trimRight2018","SPACE","normalize_space_x_esm_RegExpCtr","reNormalize2018","normalize_space_x_esm_replace","replace_comments_x_esm_EMPTY_STRING","STRIP_COMMENTS","replace_comments_x_esm_replace","fToString","funcTag","genTag","asyncTag","ctrRx","hasNativeClass","is_function_x_esm_newArrowCheck","testClassstring","normalizeSpace2018","replacement","replaceComments","isES6ClassFn","result","tryFuncToString","allowClass","isFunction","is_primitive_default","isFalsey","strTag","ONE","NUMBER","STRING","DEFAULT","StringCtr","NumberCtr","symToPrimitive","toPrimitive","symValueOf","toStringOrder","toNumberOrder","ordinaryToPrimitive","ordinary","hint","method","methodNames","getHint","supplied","to_primitive_x_esm_getExoticToPrim","func","getMethod","input","preferredType","exoticToPrim","newHint","is_date_object_default","nan_x_esm","nativeParseInt","parseInt","castNumber","charAt","hexRegex","parse_int_x_esm_test","parseInt2018","radix","str","binaryRadix","octalRadix","testCharsCount","to_number_x_esm_ERROR_MESSAGE","to_number_x_esm_castNumber","pStrSlice","slice","binaryRegex","RegExpConstructor","to_number_x_esm_test","isBinary","octalRegex","isOctal","nonWSregex2018","hasNonWS2018","invalidHexLiteral","isInvalidHexLiteral","toNumber2018","argument","trimmed","is_nan_x_esm_isNaN","sign2018","x","infinity_x_esm","is_finite_x_esm_isFinite","number","abs","to_integer_x_esm_abs","to_integer_x_esm_floor","toLength2018","len","toInteger2018","max_safe_integer_default","a","string_pad_start_x_esm_EMPTY_STRING","string_pad_start_x_esm_SPACE","__webpack_exports__","intToRGB","TARGET_LENGTH","ZER0_STRING","numbertoString","toUpperCase","targetLength","stringLength","fillString","filler","intMaxLength","fillLen","fLen","remainingCodeUnits","padStart","modulo_x_esm_default"],"mappings":"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","file":"int-to-rgb-x.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"intToRgbX\"] = factory();\n\telse\n\t\troot[\"intToRgbX\"] = factory();\n})((function () {\n  'use strict';\n\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  return Function('return this')();\n}()), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","'use strict';\n\nvar toStr = Object.prototype.toString;\nvar hasSymbols = require('has-symbols')();\n\nif (hasSymbols) {\n\tvar symToStr = Symbol.prototype.toString;\n\tvar symStringRegex = /^Symbol\\(.*\\)$/;\n\tvar isSymbolObject = function isRealSymbolObject(value) {\n\t\tif (typeof value.valueOf() !== 'symbol') {\n\t\t\treturn false;\n\t\t}\n\t\treturn symStringRegex.test(symToStr.call(value));\n\t};\n\n\tmodule.exports = function isSymbol(value) {\n\t\tif (typeof value === 'symbol') {\n\t\t\treturn true;\n\t\t}\n\t\tif (toStr.call(value) !== '[object Symbol]') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn isSymbolObject(value);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n} else {\n\n\tmodule.exports = function isSymbol(value) {\n\t\t// this environment does not support Symbols.\n\t\treturn false && value;\n\t};\n}\n","/*!\n * is-primitive <https://github.com/jonschlinkert/is-primitive>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isPrimitive(val) {\n  if (typeof val === 'object') {\n    return val === null;\n  }\n  return typeof val !== 'function';\n};\n","'use strict';\nmodule.exports = 9007199254740991;\n","'use strict';\n\nvar getDay = Date.prototype.getDay;\nvar tryDateObject = function tryDateObject(value) {\n\ttry {\n\t\tgetDay.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nvar toStr = Object.prototype.toString;\nvar dateClass = '[object Date]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isDateObject(value) {\n\tif (typeof value !== 'object' || value === null) { return false; }\n\treturn hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;\n};\n","const {floor} = Math;\n/**\n * The notation “x modulo y” (y must be finite and nonzero) computes a value k\n * of the same sign as y (or zero) such that abs(k) < abs(y) and x-k = q × y\n * for some integer q.\n *\n * Donald Knuth described floored division where the quotient is defined by\n * the floor function q = ⌊a/n⌋ and thus according to equation the remainder\n * would have the same sign as the divisor. Due to the floor function, the\n * quotient is always rounded downwards, even if it is already negative.\n *\n * @param {number} dividend - The integer to find the remainder of.\n * @param {number} divisor - The integer to divide by.\n * @returns {number} The integer remainder.\n * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-algorithm-conventions}\n * @see {@link https://en.wikipedia.org/wiki/Modulo_operation}\n */\nmodule.exports = function modulo(dividend, divisor) {\n  const remain = dividend % divisor;\n\n  return floor(remain >= 0 ? remain : remain + divisor);\n};\n","'use strict';\n\nvar origSymbol = global.Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict';\n\n/* eslint complexity: [2, 17], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","/**\n * This method attempts to invoke the function, returning either the result or\n * the caught error object. Any additional arguments are provided to the\n * function when it's invoked.\n *\n * @param {Function} [fn] - The function to attempt.\n * @param {...*} [args] - The arguments to invoke the function with.\n * @returns {object} Returns an object of the result.\n */\nexport default function attempt(fn, ...args) {\n  try {\n    return {\n      threw: false,\n      /* eslint-disable-next-line babel/no-invalid-this */\n      value: fn.apply(this, args),\n    };\n  } catch (e) {\n    return {\n      threw: true,\n      value: e,\n    };\n  }\n}\n","import attempt from 'attempt-x';\nimport isSymbol from 'is-symbol';\n\nconst hasSymbolSupport = attempt(() => {\n  /* eslint-disable-next-line compat/compat */\n  return typeof Symbol === 'function' && isSymbol(Symbol(''));\n});\n\n/**\n * Indicates if `Symbol`exists and creates the correct type.\n * `true`, if it exists and creates the correct type, otherwise `false`.\n *\n * @type boolean\n */\nexport default hasSymbolSupport.threw === false && hasSymbolSupport.value === true;\n","/**\n * The abstract operation ToBoolean converts argument to a value of type Boolean.\n *\n * @param {*} [value] - The value to be converted.\n * @returns {boolean} 'true' if value is truthy; otherwise 'false'.\n */\nexport default function toBoolean(value) {\n  return !!value;\n}\n","const nativeObjectToString = {}.toString;\n\n/**\n * The `toStringTag` method returns \"[object type]\", where type is the\n * object type.\n *\n * @param {*} [value] - The object of which to get the object type string.\n * @returns {string} The object type string.\n */\nexport default function toStringTag(value) {\n  if (value === null) {\n    return '[object Null]';\n  }\n\n  if (typeof value === 'undefined') {\n    return '[object Undefined]';\n  }\n\n  return nativeObjectToString.call(value);\n}\n","import hasSymbols from 'has-symbol-support-x';\nimport isSymbol from 'is-symbol';\n\n/**\n * Indicates if `Symbol.toStringTag`exists and is the correct type.\n * `true`, if it exists and is the correct type, otherwise `false`.\n *\n * @type boolean\n */\nexport default hasSymbols &&\n  /* eslint-disable-next-line compat/compat */\n  isSymbol(Symbol.toStringTag);\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @param {*} [value] - The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n */\nexport default function isNil(value) {\n  /* eslint-disable-next-line lodash/prefer-is-nil */\n  return value === null || typeof value === 'undefined';\n}\n","import isNil from 'is-nil-x';\n\n/**\n * The abstract operation RequireObjectCoercible throws an error if argument\n * is a value that cannot be converted to an Object using ToObject.\n *\n * @param {*} [value] - The `value` to check.\n * @throws {TypeError} If `value` is a `null` or `undefined`.\n * @returns {string} The `value`.\n */\nexport default function requireObjectCoercible(value) {\n  if (isNil(value)) {\n    throw new TypeError(`Cannot call method on ${value}`);\n  }\n\n  return value;\n}\n","import isSymbol from 'is-symbol';\n\nconst ERROR_MESSAGE = 'Cannot convert a Symbol value to a string';\nconst castString = ERROR_MESSAGE.constructor;\n/**\n * The abstract operation ToString converts argument to a value of type String.\n *\n * @param {*} [value] - The value to convert to a string.\n * @throws {TypeError} If `value` is a Symbol.\n * @returns {string} The converted value.\n */\nexport default function ToString(value) {\n  if (isSymbol(value)) {\n    throw new TypeError(ERROR_MESSAGE);\n  }\n\n  return castString(value);\n}\n","import requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\n\n/**\n * This method requires an argument is corecible then converts using ToString.\n *\n * @param {*} [value] - The value to converted to a string.\n * @throws {TypeError} If value is null or undefined.\n * @returns {string} The value as a string.\n */\nexport default function requireCoercibleToString(value) {\n  return toStr(requireObjectCoercible(value));\n}\n","/**\n * A record of a white space character.\n *\n * @typedef {object} CharRecord\n * @property {number} code - The character code.\n * @property {string} description - A description of the character.\n * @property {boolean} es5 - Whether the spec lists this as a white space.\n * @property {boolean} es2015 - Whether the spec lists this as a white space.\n * @property {boolean} es2016 - Whether the spec lists this as a white space.\n * @property {boolean} es2017 - Whether the spec lists this as a white space.\n * @property {boolean} es2018 - Whether the spec lists this as a white space.\n * @property {string} string - The character string.\n */\n\n/**\n * An array of the whitespace char codes, string, descriptions and language\n * presence in the specifications.\n *\n * @type Array.<CharRecord>\n */\nexport const list = [\n  {\n    code: 0x0009,\n    description: 'Tab',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u0009',\n  },\n  {\n    code: 0x000a,\n    description: 'Line Feed',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u000a',\n  },\n  {\n    code: 0x000b,\n    description: 'Vertical Tab',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u000b',\n  },\n  {\n    code: 0x000c,\n    description: 'Form Feed',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u000c',\n  },\n  {\n    code: 0x000d,\n    description: 'Carriage Return',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u000d',\n  },\n  {\n    code: 0x0020,\n    description: 'Space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u0020',\n  },\n  /*\n  {\n    code: 0x0085,\n    description: 'Next line',\n    es5: false,\n    es2015: false,\n    es2016: false,\n    es2017: false,\n    es2018: false,\n    string: '\\u0085'\n  }\n  */\n  {\n    code: 0x00a0,\n    description: 'No-break space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u00a0',\n  },\n  {\n    code: 0x1680,\n    description: 'Ogham space mark',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u1680',\n  },\n  {\n    code: 0x180e,\n    description: 'Mongolian vowel separator',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: false,\n    es2018: false,\n    string: '\\u180e',\n  },\n  {\n    code: 0x2000,\n    description: 'En quad',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2000',\n  },\n  {\n    code: 0x2001,\n    description: 'Em quad',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2001',\n  },\n  {\n    code: 0x2002,\n    description: 'En space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2002',\n  },\n  {\n    code: 0x2003,\n    description: 'Em space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2003',\n  },\n  {\n    code: 0x2004,\n    description: 'Three-per-em space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2004',\n  },\n  {\n    code: 0x2005,\n    description: 'Four-per-em space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2005',\n  },\n  {\n    code: 0x2006,\n    description: 'Six-per-em space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2006',\n  },\n  {\n    code: 0x2007,\n    description: 'Figure space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2007',\n  },\n  {\n    code: 0x2008,\n    description: 'Punctuation space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2008',\n  },\n  {\n    code: 0x2009,\n    description: 'Thin space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2009',\n  },\n  {\n    code: 0x200a,\n    description: 'Hair space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u200a',\n  },\n  /*\n  {\n    code: 0x200b,\n    description: 'Zero width space',\n    es5: false,\n    es2015: false,\n    es2016: false,\n    es2017: false,\n    es2018: false,\n    string: '\\u200b'\n  },\n  */\n  {\n    code: 0x2028,\n    description: 'Line separator',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2028',\n  },\n  {\n    code: 0x2029,\n    description: 'Paragraph separator',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u2029',\n  },\n  {\n    code: 0x202f,\n    description: 'Narrow no-break space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u202f',\n  },\n  {\n    code: 0x205f,\n    description: 'Medium mathematical space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u205f',\n  },\n  {\n    code: 0x3000,\n    description: 'Ideographic space',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\u3000',\n  },\n  {\n    code: 0xfeff,\n    description: 'Byte Order Mark',\n    es5: true,\n    es2015: true,\n    es2016: true,\n    es2017: true,\n    es2018: true,\n    string: '\\ufeff',\n  },\n];\n\n/**\n * A string of the ES5 to ES2016 whitespace characters.\n *\n * @type string\n */\nlet stringES2016 = '';\n\n/**\n * A string of the ES2017 to ES2018 whitespace characters.\n *\n * @type string\n */\nlet stringES2018 = '';\nconst {length} = list;\nfor (let i = 0; i < length; i += 1) {\n  if (list[i].es2016) {\n    stringES2016 += list[i].string;\n  }\n\n  if (list[i].es2018) {\n    stringES2018 += list[i].string;\n  }\n}\n\nconst string2018 = stringES2018;\n\nexport default string2018;\nexport const string2016 = stringES2016;\n","import requireCoercibleToString from 'require-coercible-to-string-x';\nimport whiteSpace, {string2016} from 'white-space-x';\n\nconst EMPTY_STRING = '';\nconst RegExpCtr = /none/.constructor;\nconst reLeft2016 = new RegExpCtr(`^[${string2016}]+`);\nconst reLeft = new RegExpCtr(`^[${whiteSpace}]+`);\nconst {replace} = EMPTY_STRING;\n\n/**\n * This method removes whitespace from the left end of a string. (ES2016).\n *\n * @param {string} [string] - The string to trim the left end whitespace from.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The left trimmed string.\n */\nexport function trimLeft2016(string) {\n  return replace.call(requireCoercibleToString(string), reLeft2016, EMPTY_STRING);\n}\n\n/**\n * This method removes whitespace from the left end of a string. (ES2018).\n *\n * @param {string} [string] - The string to trim the left end whitespace from.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The left trimmed string.\n */\nexport default function trimLeft2018(string) {\n  return replace.call(requireCoercibleToString(string), reLeft, EMPTY_STRING);\n}\n","import requireCoercibleToString from 'require-coercible-to-string-x';\nimport whiteSpace, {string2016} from 'white-space-x';\n\nconst EMPTY_STRING = '';\nconst RegExpCtr = /none/.constructor;\nconst reRight2016 = new RegExpCtr(`[${string2016}]+$`);\nconst reRight2018 = new RegExpCtr(`[${whiteSpace}]+$`);\nconst {replace} = EMPTY_STRING;\n\n/**\n * This method removes whitespace from the right end of a string. (ES2016).\n *\n * @param {string} [string] - The string to trim the right end whitespace from.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The right trimmed string.\n */\nexport function trimRight2016(string) {\n  return replace.call(requireCoercibleToString(string), reRight2016, EMPTY_STRING);\n}\n\n/**\n * This method removes whitespace from the right end of a string. (ES2018).\n *\n * @param {string} [string] - The string to trim the right end whitespace from.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The right trimmed string.\n */\nexport default function trimRight2018(string) {\n  return replace.call(requireCoercibleToString(string), reRight2018, EMPTY_STRING);\n}\n","import trimLeft, {trimLeft2016} from 'trim-left-x';\nimport trimRight, {trimRight2016} from 'trim-right-x';\n\n/**\n * This method removes whitespace from the left and right end of a string.\n * (ES2016).\n *\n * @param {string} [string] - The string to trim the whitespace from.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The trimmed string.\n */\nexport function trim2016(string) {\n  return trimLeft2016(trimRight2016(string));\n}\n\n/**\n * This method removes whitespace from the left and right end of a string.\n * (ES2018).\n *\n * @param {string} [string] - The string to trim the whitespace from.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The trimmed string.\n */\nexport default function trim2018(string) {\n  return trimLeft(trimRight(string));\n}\n","import trim, {trim2016} from 'trim-x';\nimport whiteSpace, {string2016} from 'white-space-x';\n\nconst SPACE = ' ';\nconst RegExpCtr = /none/.constructor;\nconst reNormalize2016 = new RegExpCtr(`[${string2016}]+`, 'g');\nconst reNormalize2018 = new RegExpCtr(`[${whiteSpace}]+`, 'g');\nconst {replace} = SPACE;\n\n/**\n * This method strips leading and trailing white-space from a string,\n * replaces sequences of whitespace characters by a single space,\n * and returns the resulting string. (ES2016).\n *\n * @param {string} [string] - The string to be normalized.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The normalized string.\n */\nexport function normalizeSpace2016(string) {\n  return replace.call(trim2016(string), reNormalize2016, SPACE);\n}\n\n/**\n * This method strips leading and trailing white-space from a string,\n * replaces sequences of whitespace characters by a single space,\n * and returns the resulting string. (ES2018).\n *\n * @param {string} [string] - The string to be normalized.\n * @throws {TypeError} If string is null or undefined or not coercible.\n */\nexport default function normalizeSpace2018(string) {\n  return replace.call(trim(string), reNormalize2018, SPACE);\n}\n","import toStr from 'to-string-x';\nimport requireCoercibleToString from 'require-coercible-to-string-x';\n\nconst EMPTY_STRING = '';\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nconst {replace} = EMPTY_STRING;\n\n/**\n * This method replaces comments in a string.\n *\n * @param {string} [string] - The string to be stripped.\n * @param {string} [replacement=''] - The string to be used as a replacement.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @throws {TypeError} If replacement is not coercible.\n * @returns {string} The new string with the comments replaced.\n */\nexport default function replaceComments(string, replacement) {\n  return replace.call(requireCoercibleToString(string), STRIP_COMMENTS, arguments.length > 1 ? toStr(replacement) : EMPTY_STRING);\n}\n","import attempt from 'attempt-x';\nimport toBoolean from 'to-boolean-x';\nimport isFalsey from 'is-falsey-x';\nimport toStringTag from 'to-string-tag-x';\nimport hasToStringTag from 'has-to-string-tag-x';\nimport isPrimitive from 'is-primitive';\nimport normalise from 'normalize-space-x';\nimport deComment from 'replace-comments-x';\n\nconst SPACE = ' ';\nconst fToString = Function.prototype.toString;\nconst funcTag = '[object Function]';\nconst genTag = '[object GeneratorFunction]';\nconst asyncTag = '[object AsyncFunction]';\nconst ctrRx = /^class /;\nconst {test} = ctrRx;\n\nconst hasNativeClass =\n  attempt(() => {\n    /* eslint-disable-next-line no-new-func */\n    return Function('\"use strict\"; return class My {};')();\n  }).threw === false;\n\nconst testClassstring = function _testClassstring(value) {\n  return test.call(ctrRx, normalise(deComment(fToString.call(value), SPACE)));\n};\n\nconst isES6ClassFn = function isES6ClassFunc(value) {\n  const result = attempt(testClassstring, value);\n\n  return result.threw === false && result.value;\n};\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @private\n * @param {*} value - The value to check.\n * @param {boolean} allowClass - Whether to filter ES6 classes.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n * else `false`.\n */\nconst tryFuncToString = function funcToString(value, allowClass) {\n  if (hasNativeClass && allowClass === false && isES6ClassFn(value)) {\n    return false;\n  }\n\n  return attempt.call(value, fToString).threw === false;\n};\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @param {*} value - The value to check.\n * @param {boolean} [allowClass=false] - Whether to filter ES6 classes.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n * else `false`.\n */\nexport default function isFunction(value, allowClass) {\n  if (isPrimitive(value)) {\n    return false;\n  }\n\n  if (hasToStringTag) {\n    return tryFuncToString(value, toBoolean(allowClass));\n  }\n\n  if (hasNativeClass && isFalsey(allowClass) && isES6ClassFn(value)) {\n    return false;\n  }\n\n  const strTag = toStringTag(value);\n\n  return strTag === funcTag || strTag === genTag || strTag === asyncTag;\n}\n","import toBoolean from 'to-boolean-x';\n\n/**\n * This method tests if a given value is falsey.\n *\n * @param {*} [value] - The value to test.\n * @returns {boolean} `true` if the value is falsey: otherwise `false`.\n */\nexport default function isFalsey(value) {\n  return !toBoolean(value);\n}\n","import hasSymbols from 'has-symbol-support-x';\nimport isPrimitive from 'is-primitive';\nimport isDate from 'is-date-object';\nimport isSymbol from 'is-symbol';\nimport isFunction from 'is-function-x';\nimport requireObjectCoercible from 'require-object-coercible-x';\nimport isNil from 'is-nil-x';\n\nconst ZERO = 0;\nconst ONE = 1;\n/* eslint-disable-next-line no-void */\nconst UNDEFINED = void ZERO;\nconst NUMBER = 'number';\nconst STRING = 'string';\nconst DEFAULT = 'default';\n/** @type {StringConstructor} */\nconst StringCtr = STRING.constructor;\n/** @type {NumberConstructor} */\nconst NumberCtr = ZERO.constructor;\n/* eslint-disable-next-line compat/compat */\nconst symToPrimitive = hasSymbols && Symbol.toPrimitive;\n/* eslint-disable-next-line compat/compat */\nconst symValueOf = hasSymbols && Symbol.prototype.valueOf;\n\nconst toStringOrder = ['toString', 'valueOf'];\nconst toNumberOrder = ['valueOf', 'toString'];\nconst orderLength = 2;\n\n/**\n * @param {*} ordinary - The ordinary to convert.\n * @param {*} hint - The hint.\n * @returns {*} - The primitive.\n */\nconst ordinaryToPrimitive = function _ordinaryToPrimitive(ordinary, hint) {\n  requireObjectCoercible(ordinary);\n\n  if (typeof hint !== 'string' || (hint !== NUMBER && hint !== STRING)) {\n    throw new TypeError('hint must be \"string\" or \"number\"');\n  }\n\n  const methodNames = hint === STRING ? toStringOrder : toNumberOrder;\n  let method;\n  let result;\n  for (let i = ZERO; i < orderLength; i += ONE) {\n    method = ordinary[methodNames[i]];\n\n    if (isFunction(method)) {\n      result = method.call(ordinary);\n\n      if (isPrimitive(result)) {\n        return result;\n      }\n    }\n  }\n\n  throw new TypeError('No default value');\n};\n\n/**\n * @param {*} object - The object.\n * @param {*} property - The property.\n * @returns {undefined|Function} - The method.\n */\nconst getMethod = function _getMethod(object, property) {\n  const func = object[property];\n\n  if (isNil(func) === false) {\n    if (isFunction(func) === false) {\n      throw new TypeError(`${func} returned for property ${property} of object ${object} is not a function`);\n    }\n\n    return func;\n  }\n\n  return UNDEFINED;\n};\n\n/**\n * Get the hint.\n *\n * @param {*} value - The value to compare.\n * @param {boolean} supplied - Was a value supplied.\n * @returns {string} - The hint string.\n */\nconst getHint = function getHint(value, supplied) {\n  if (supplied) {\n    if (value === StringCtr) {\n      return STRING;\n    }\n\n    if (value === NumberCtr) {\n      return NUMBER;\n    }\n  }\n\n  return DEFAULT;\n};\n\n/**\n * Get the primitive from the exotic.\n *\n * @param {*} value - The exotic.\n * @returns {*} - The primitive.\n */\nconst getExoticToPrim = function getExoticToPrim(value) {\n  if (hasSymbols) {\n    if (symToPrimitive) {\n      return getMethod(value, symToPrimitive);\n    }\n\n    if (isSymbol(value)) {\n      return symValueOf;\n    }\n  }\n\n  return UNDEFINED;\n};\n\n/**\n * This method converts a JavaScript object to a primitive value.\n * Note: When toPrimitive is called with no hint, then it generally behaves as\n * if the hint were Number. However, objects may over-ride this behaviour by\n * defining a @@toPrimitive method. Of the objects defined in this specification\n * only Date objects (see 20.3.4.45) and Symbol objects (see 19.4.3.4) over-ride\n * the default ToPrimitive behaviour. Date objects treat no hint as if the hint\n * were String.\n *\n * @param {*} input - The input to convert.\n * @param {NumberConstructor|StringConstructor} [preferredType] - The preferred type (String or Number).\n * @throws {TypeError} If unable to convert input to a primitive.\n * @returns {string|number} The converted input as a primitive.\n * @see {http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive}\n */\nexport default function toPrimitive(input, preferredType) {\n  if (isPrimitive(input)) {\n    return input;\n  }\n\n  const hint = getHint(preferredType, arguments.length > ONE);\n  const exoticToPrim = getExoticToPrim(input);\n\n  if (typeof exoticToPrim !== 'undefined') {\n    const result = exoticToPrim.call(input, hint);\n\n    if (isPrimitive(result)) {\n      return result;\n    }\n\n    throw new TypeError('unable to convert exotic object to primitive');\n  }\n\n  const newHint = hint === DEFAULT && (isDate(input) || isSymbol(input)) ? STRING : hint;\n\n  return ordinaryToPrimitive(input, newHint === DEFAULT ? NUMBER : newHint);\n}\n","/**\n * The constant NaN derived mathematically by 0 / 0.\n *\n * @type number\n */\nexport default 0 / 0;\n","import NAN from 'nan-x';\nimport toStr from 'to-string-x';\nimport trimLeft, {trimLeft2016} from 'trim-left-x';\n\nconst nativeParseInt = parseInt;\n/**  @type {Function} */\nconst castNumber = (0).constructor;\n// noinspection JSPotentiallyInvalidConstructorUsage\nconst {charAt} = '';\nconst hexRegex = /^[-+]?0[xX]/;\nconst {test} = hexRegex;\n\n/**\n * This method parses a string argument and returns an integer of the specified\n * radix (the base in mathematical numeral systems). (ES2016).\n *\n * @param {string} [string] - The value to parse. If the string argument is not a\n *  string, then it is converted to a string (using the ToString abstract\n *  operation). Leading whitespace in the string argument is ignored.\n * @param {number} [radix] - An integer between 2 and 36 that represents the radix\n *  (the base in mathematical numeral systems) of the above mentioned string.\n *  Specify 10 for the decimal numeral system commonly used by humans. Always\n *  specify this parameter to eliminate reader confusion and to guarantee\n *  predictable behavior. Different implementations produce different results\n *  when a radix is not specified, usually defaulting the value to 10.\n * @throws {TypeError} If target is a Symbol or is not coercible.\n * @returns {number} An integer number parsed from the given string. If the first\n *  character cannot be converted to a number, NaN is returned.\n */\nexport function parseInt2016(string, radix) {\n  const str = trimLeft2016(toStr(string));\n\n  return nativeParseInt(str, castNumber(radix) || (test.call(hexRegex, str) ? 16 : 10));\n}\n\n/**\n * This method parses a string argument and returns an integer of the specified\n * radix (the base in mathematical numeral systems). (ES2018).\n *\n * @param {string} [string] - The value to parse. If the string argument is not a\n *  string, then it is converted to a string (using the ToString abstract\n *  operation). Leading whitespace in the string argument is ignored.\n * @param {number} [radix] - An integer between 2 and 36 that represents the radix\n *  (the base in mathematical numeral systems) of the above mentioned string.\n *  Specify 10 for the decimal numeral system commonly used by humans. Always\n *  specify this parameter to eliminate reader confusion and to guarantee\n *  predictable behavior. Different implementations produce different results\n *  when a radix is not specified, usually defaulting the value to 10.\n * @throws {TypeError} If target is a Symbol or is not coercible.\n * @returns {number} An integer number parsed from the given string. If the first\n *  character cannot be converted to a number, NaN is returned.\n */\nexport default function parseInt2018(string, radix) {\n  const str = trimLeft(toStr(string));\n\n  if (charAt.call(str, 0) === '\\u180E') {\n    return NAN;\n  }\n\n  return nativeParseInt(str, castNumber(radix) || (test.call(hexRegex, str) ? 16 : 10));\n}\n","import isSymbol from 'is-symbol';\nimport toPrimitive from 'to-primitive-x';\nimport trim, {trim2016} from 'trim-x';\nimport $parseInt, {parseInt2016} from 'parse-int-x';\nimport NAN from 'nan-x';\n\nconst binaryRadix = 2;\nconst octalRadix = 8;\nconst testCharsCount = 2;\nconst ERROR_MESSAGE = 'Cannot convert a Symbol value to a number';\n\n/** @type {NumberConstructor} */\nconst castNumber = testCharsCount.constructor;\nconst pStrSlice = ERROR_MESSAGE.slice;\n\nconst binaryRegex = /^0b[01]+$/i;\nconst RegExpConstructor = binaryRegex.constructor;\n// Note that in IE 8, RegExp.prototype.test doesn't seem to exist: ie, \"test\" is\n// an own property of regexes. wtf.\nconst {test} = binaryRegex;\nconst isBinary = function _isBinary(value) {\n  return test.call(binaryRegex, value);\n};\n\nconst octalRegex = /^0o[0-7]+$/i;\nconst isOctal = function _isOctal(value) {\n  return test.call(octalRegex, value);\n};\n\nconst nonWSregex2016 = new RegExpConstructor('[\\u0085\\u200b\\ufffe]', 'g');\nconst hasNonWS2016 = function _hasNonWS(value) {\n  return test.call(nonWSregex2016, value);\n};\n\nconst nonWSregex2018 = new RegExpConstructor('[\\u0085\\u180e\\u200b\\ufffe]', 'g');\nconst hasNonWS2018 = function _hasNonWS(value) {\n  return test.call(nonWSregex2018, value);\n};\n\nconst invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;\nconst isInvalidHexLiteral = function _isInvalidHexLiteral(value) {\n  return test.call(invalidHexLiteral, value);\n};\n\n/**\n * This method converts argument to a value of type Number. (ES2016).\n *\n * @param {*} [argument] - The argument to convert to a number.\n * @throws {TypeError} - If argument is a Symbol or not coercible.\n * @returns {*} The argument converted to a number.\n */\nexport function toNumber2016(argument) {\n  const value = toPrimitive(argument, Number);\n\n  if (isSymbol(value)) {\n    throw new TypeError(ERROR_MESSAGE);\n  }\n\n  if (typeof value === 'string') {\n    if (isBinary(value)) {\n      return toNumber2016(parseInt2016(pStrSlice.call(value, testCharsCount), binaryRadix));\n    }\n\n    if (isOctal(value)) {\n      return toNumber2016(parseInt2016(pStrSlice.call(value, testCharsCount), octalRadix));\n    }\n\n    if (hasNonWS2016(value) || isInvalidHexLiteral(value)) {\n      return NAN;\n    }\n\n    const trimmed = trim2016(value);\n\n    if (trimmed !== value) {\n      return toNumber2016(trimmed);\n    }\n  }\n\n  return castNumber(value);\n}\n\n/**\n * This method converts argument to a value of type Number. (ES2018).\n *\n * @param {*} [argument] - The argument to convert to a number.\n * @throws {TypeError} - If argument is a Symbol or not coercible.\n * @returns {*} The argument converted to a number.\n */\nexport default function toNumber2018(argument) {\n  const value = toPrimitive(argument, castNumber);\n\n  if (isSymbol(value)) {\n    throw new TypeError(ERROR_MESSAGE);\n  }\n\n  if (typeof value === 'string') {\n    if (isBinary(value)) {\n      return toNumber2018($parseInt(pStrSlice.call(value, testCharsCount), binaryRadix));\n    }\n\n    if (isOctal(value)) {\n      return toNumber2018($parseInt(pStrSlice.call(value, testCharsCount), octalRadix));\n    }\n\n    if (hasNonWS2018(value) || isInvalidHexLiteral(value)) {\n      return NAN;\n    }\n\n    const trimmed = trim(value);\n\n    if (trimmed !== value) {\n      return toNumber2018(trimmed);\n    }\n  }\n\n  return castNumber(value);\n}\n","/**\n * This method determines whether the passed value is NaN and its type is\n * `Number`. It is a more robust version of the original, global isNaN().\n *\n * @param {*} [value] - The value to be tested for NaN.\n * @returns {boolean} `true` if the given value is NaN and its type is Number;\n *  otherwise, `false`.\n */\nexport default function isNaN(value) {\n  /* eslint-disable-next-line no-self-compare */\n  return value !== value;\n}\n","import toNumber, {toNumber2016} from 'to-number-x';\nimport numberIsNaN from 'is-nan-x';\n\n/**\n * This method returns the sign of a number, indicating whether the number is positive,\n * negative or zero. (ES2016).\n *\n * @param {*} x - A number.\n * @returns {number} A number representing the sign of the given argument. If the argument\n * is a positive number, negative number, positive zero or negative zero, the function will\n * return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned.\n */\nexport function sign2016(x) {\n  const n = toNumber2016(x);\n\n  if (n === 0 || numberIsNaN(n)) {\n    return n;\n  }\n\n  return n > 0 ? 1 : -1;\n}\n\n/**\n * This method returns the sign of a number, indicating whether the number is positive,\n * negative or zero. (ES2018).\n *\n * @param {*} x - A number.\n * @returns {number} A number representing the sign of the given argument. If the argument\n * is a positive number, negative number, positive zero or negative zero, the function will\n * return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned.\n */\nexport default function sign2018(x) {\n  const n = toNumber(x);\n\n  if (n === 0 || numberIsNaN(n)) {\n    return n;\n  }\n\n  return n > 0 ? 1 : -1;\n}\n","/**\n * The constant value Infinity derived mathematically by 1 / 0.\n *\n * @type number\n */\nexport default 1 / 0;\n","import numberIsNaN from 'is-nan-x';\nimport INFINITY from 'infinity-x';\n\n/**\n * This method determines whether the passed value is a finite number.\n *\n * @param {*} [number] - The value to be tested for finiteness.\n * @returns {boolean} A Boolean indicating whether or not the given value is a finite number.\n */\nexport default function isFinite(number) {\n  return typeof number === 'number' && numberIsNaN(number) === false && number !== INFINITY && number !== -INFINITY;\n}\n","import toNumber from 'to-number-x';\nimport modulo from 'modulo-x';\nimport sign from 'math-sign-x';\nimport numberIsFinite from 'is-finite-x';\n\nconst {floor, abs} = Math;\n\n/**\n * The abstract operation ToUint24 converts argument to one of 2^24 integer\n * values in the range 0 through 2^24-1, inclusive.\n *\n * @param {number} argument - The argument to convert to one of 2^24 integers.\n * @returns {number} Integer value, 0 through 2^24-1, inclusive.\n */\nexport default function toUint24(argument) {\n  // Let number be ? ToNumber(argument).\n  const number = toNumber(argument);\n\n  // If number is NaN, +0, -0, +∞, or -∞, return +0.\n  if (number === 0 || numberIsFinite(number) === false) {\n    return 0;\n  }\n\n  // Let int be the mathematical value that is the same sign as number and\n  // whose magnitude is floor(abs(number)).\n  // Let int24bit be int modulo 2^24.\n  return modulo(sign(number) * floor(abs(number)), 0x1000000);\n}\n","import toNumber, {toNumber2016} from 'to-number-x';\nimport numberIsNaN from 'is-nan-x';\nimport numberIsFinite from 'is-finite-x';\nimport mathSign, {sign2016} from 'math-sign-x';\n\nconst {abs, floor} = Math;\n\n/**\n * Converts `value` to an integer. (ES2016).\n *\n * @param {*} value - The value to convert.\n * @returns {number} Returns the converted integer.\n */\nexport function toInteger2016(value) {\n  const number = toNumber2016(value);\n\n  if (numberIsNaN(number)) {\n    return 0;\n  }\n\n  if (number === 0 || numberIsFinite(number) === false) {\n    return number;\n  }\n\n  return sign2016(number) * floor(abs(number));\n}\n\n/**\n * Converts `value` to an integer. (ES2018).\n *\n * @param {*} value - The value to convert.\n * @returns {number} Returns the converted integer.\n */\nexport default function toInteger2018(value) {\n  const number = toNumber(value);\n\n  if (numberIsNaN(number)) {\n    return 0;\n  }\n\n  if (number === 0 || numberIsFinite(number) === false) {\n    return number;\n  }\n\n  return mathSign(number) * floor(abs(number));\n}\n","import toInteger, {toInteger2016} from 'to-integer-x';\nimport MAX_SAFE_INTEGER from 'max-safe-integer';\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object. (ES2016).\n *\n * @param {*} value - The value to convert.\n * @returns {number} Returns the converted integer.\n */\nexport function toLength2016(value) {\n  const len = toInteger2016(value);\n\n  // includes converting -0 to +0\n  if (len <= 0) {\n    return 0;\n  }\n\n  if (len > MAX_SAFE_INTEGER) {\n    return MAX_SAFE_INTEGER;\n  }\n\n  return len;\n}\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object. (ES2018).\n *\n * @param {*} value - The value to convert.\n * @returns {number} Returns the converted integer.\n */\nexport default function toLength2018(value) {\n  const len = toInteger(value);\n\n  // includes converting -0 to +0\n  if (len <= 0) {\n    return 0;\n  }\n\n  if (len > MAX_SAFE_INTEGER) {\n    return MAX_SAFE_INTEGER;\n  }\n\n  return len;\n}\n","import requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\nimport toLength from 'to-length-x';\n\nconst EMPTY_STRING = '';\nconst {slice} = EMPTY_STRING;\nconst SPACE = ' ';\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * This method pads the current string with another string (repeated, if needed)\n * so that the resulting string reaches the given length. The padding is applied\n * from the start (left) of the current string.\n *\n * @param {string} string - The string to pad.\n * @throws {TypeError} If target is null or undefined.\n * @param {number} targetLength - The length of the resulting string once the\n *  current string has been padded. If the value is lower than the current\n *  string's length, the current string will be returned as is.\n * @param {string} [padString] - The string to pad the current string with. If\n *  this string is too long to stay within the target length, it will be\n *  truncated and the left-most part will be applied. The default value for this\n *  parameter is \" \" (U+0020).\n * @returns {string} A String of the specified length with the pad string\n *  applied from the start.\n */\n// eslint-enable jsdoc/check-param-names\nexport default function padStart(string, targetLength) {\n  const str = toStr(requireObjectCoercible(string));\n  const stringLength = toLength(str.length);\n  /* eslint-disable-next-line prefer-rest-params,no-void */\n  const fillString = arguments.length > 2 ? arguments[2] : void 0;\n  let filler = typeof fillString === 'undefined' ? EMPTY_STRING : toStr(fillString);\n\n  if (filler === EMPTY_STRING) {\n    filler = SPACE;\n  }\n\n  const intMaxLength = toLength(targetLength);\n\n  if (intMaxLength <= stringLength) {\n    return str;\n  }\n\n  const fillLen = intMaxLength - stringLength;\n  while (filler.length < fillLen) {\n    const fLen = filler.length;\n    const remainingCodeUnits = fillLen - fLen;\n    filler += fLen > remainingCodeUnits ? slice.call(filler, 0, remainingCodeUnits) : filler;\n  }\n\n  const truncatedStringFiller = filler.length > fillLen ? slice.call(filler, 0, fillLen) : filler;\n\n  return truncatedStringFiller + str;\n}\n","import toUint24 from 'to-uint-24-x';\nimport padStart from 'string-pad-start-x';\n\nconst RADIX = 16;\nconst TARGET_LENGTH = 6;\nconst ZER0_STRING = '0';\nconst numbertoString = RADIX.toString;\nconst {toUpperCase} = ZER0_STRING;\n\n/**\n * Takes a number between 0 and 16777215 inclusive and converts it\n * into 6 digit RGB notation.\n *\n * @param {number} i - Integer to be converted into 6 digit RGB.\n * @returns {string} The RGB hexadecimal notation: \"#RRGGBB\".\n */\nexport default function intToRGB(i) {\n  return `#${toUpperCase.call(padStart(numbertoString.call(toUint24(i), 16), TARGET_LENGTH, ZER0_STRING))}`;\n}\n"],"sourceRoot":""}